% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subclustering.R
\name{FindNeighborCells}
\alias{FindNeighborCells}
\title{Find neighbor cells}
\usage{
FindNeighborCells(
  object,
  query = NULL,
  distance.matrix = FALSE,
  k.param = 20,
  return.neighbor = FALSE,
  compute.SNN = !return.neighbor,
  prune.SNN = 1/15,
  nn.method = "annoy",
  n.trees = 50,
  annoy.metric = "euclidean",
  nn.eps = 0,
  verbose = TRUE,
  force.recalc = FALSE,
  l2.norm = FALSE,
  cache.index = FALSE,
  index = NULL,
  ...
)
}
\arguments{
\item{query}{Matrix of data to query against object. If missing, defaults to
object.}

\item{distance.matrix}{Boolean value of whether the provided matrix is a
distance matrix; note, for objects of class \code{dist}, this parameter will
be set automatically}

\item{k.param}{Defines k for the k-nearest neighbor algorithm}

\item{return.neighbor}{Return result as \code{\link{Neighbor}} object. Not
used with distance matrix input.}

\item{compute.SNN}{also compute the shared nearest neighbor graph}

\item{prune.SNN}{Sets the cutoff for acceptable Jaccard index when
computing the neighborhood overlap for the SNN construction. Any edges with
values less than or equal to this will be set to 0 and removed from the SNN
graph. Essentially sets the stringency of pruning (0 --- no pruning, 1 ---
prune everything).}

\item{nn.method}{Method for nearest neighbor finding. Options include: rann,
annoy}

\item{n.trees}{More trees gives higher precision when using annoy approximate
nearest neighbor search}

\item{annoy.metric}{Distance metric for annoy. Options include: euclidean,
cosine, manhattan, and hamming}

\item{nn.eps}{Error bound when performing nearest neighbor seach using RANN;
default of 0.0 implies exact nearest neighbor search}

\item{verbose}{Whether or not to print output to the console}

\item{force.recalc}{Force recalculation of (S)NN.}

\item{l2.norm}{Take L2Norm of the data}

\item{cache.index}{Include cached index in returned Neighbor object
(only relevant if return.neighbor = TRUE)}

\item{index}{Precomputed index. Useful if querying new data against existing
index to avoid recomputing.}
}
\description{
Find neighbor cells
}
\concept{clustering}
